(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{796:function(t,e,r){"use strict";r.r(e);var a=r(4),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[r("strong",[t._v("学习要点：")])]),t._v(" "),r("ol",[r("li",[t._v("所有的编码器都继承自"),r("code",[t._v("VideoEncoder")]),t._v("类")]),t._v(" "),r("li",[r("code",[t._v("LibvpxVp9Encoder")]),t._v("继承自"),r("code",[t._v("VP9Encoder")]),t._v("，"),r("code",[t._v("VP9Encoder")]),t._v("继承自"),r("code",[t._v("VideoEncoder")])]),t._v(" "),r("li",[r("code",[t._v("LibvpxInterface")]),t._v("类对libvpx里面的那些函数接口进行了封装（libvpx是C写的，没有面向对象）")]),t._v(" "),r("li",[r("code",[t._v("LibvpxVp8Encoder")]),t._v("和"),r("code",[t._v("LibvpxVp9Encoder")]),t._v("都是调用"),r("code",[t._v("LibvpxInterface")]),t._v("类进行的实现，而不是直接调用libvpx里面的函数接口")]),t._v(" "),r("li",[t._v("因此，"),r("code",[t._v("VideoEncoder")]),t._v("就是沟通底层编码器和上层应用的接口。顺着"),r("code",[t._v("VideoEncoder")]),t._v("向上可以找到实现自适应编码的过程、向下可以找到自适应编码修改了编码器的哪些参数。")])]),t._v(" "),r("p",[t._v("前置知识：先至少要知道WebRTC的一些接口标准，"),r("RouterLink",{attrs:{to:"/WebRTC/传入总结.html"}},[t._v("《pion学习总结：等待传入track的一般流程》")]),t._v("和"),r("RouterLink",{attrs:{to:"/WebRTC/传入总结.html"}},[t._v("《pion学习总结：等待传入track的一般流程》")]),t._v("可能会有所帮助。")],1),t._v(" "),r("p",[t._v("最近在愁WebRTC MCU相关的事，需要基于WebRTC实现流处理转发单元，并且这个处理流是要处理流的内容，即把视频解码出来放进什么神经网络里处理好再编码回去。如果还要用上WebRTC的自适应码率调节机制的话")]),t._v(" "),r("p",[t._v("偶然在CSDN看到一篇给WebRTC用自定义编解码算法的操作："),r("a",{attrs:{href:"https://blog.csdn.net/foruok/article/details/70237019",target:"_blank",rel:"noopener noreferrer"}},[t._v("《让 WebRTC 使用外部的音视频编解码器》"),r("OutboundLink")],1),t._v("，喜出望外，遂顺着这个学习一下WebRTC里的编解码器都是什么样的。")]),t._v(" "),r("p",[t._v("按照"),r("a",{attrs:{href:"https://blog.csdn.net/foruok/article/details/70237019",target:"_blank",rel:"noopener noreferrer"}},[t._v("《让 WebRTC 使用外部的音视频编解码器》"),r("OutboundLink")],1),t._v("，先从最顶层的"),r("code",[t._v("CreatePeerConnectionFactory")]),t._v("开始看：")]),t._v(" "),r("p",[r("code",[t._v("api/create_peerconnection_factory.h")]),t._v(":")]),t._v(" "),r("div",{staticClass:"language-cpp line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-cpp"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create a new instance of PeerConnectionFactoryInterface with optional video")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// codec factories. These video factories represents all video codecs, i.e. no")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// extra internal video codecs will be added.")]),t._v("\nRTC_EXPORT rtc"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("scoped_refptr"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("PeerConnectionFactoryInterface"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("CreatePeerConnectionFactory")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    rtc"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Thread"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" network_thread"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    rtc"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Thread"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" worker_thread"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    rtc"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Thread"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" signaling_thread"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    rtc"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("scoped_refptr"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("AudioDeviceModule"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" default_adm"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    rtc"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("scoped_refptr"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("AudioEncoderFactory"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" audio_encoder_factory"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    rtc"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("scoped_refptr"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("AudioDecoderFactory"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" audio_decoder_factory"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    std"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("unique_ptr"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("VideoEncoderFactory"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" video_encoder_factory"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    std"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("unique_ptr"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("VideoDecoderFactory"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" video_decoder_factory"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    rtc"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("scoped_refptr"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("AudioMixer"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" audio_mixer"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    rtc"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("scoped_refptr"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("AudioProcessing"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" audio_processing"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    AudioFrameProcessor"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" audio_frame_processor "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// namespace webrtc")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br"),r("span",{staticClass:"line-number"},[t._v("10")]),r("br"),r("span",{staticClass:"line-number"},[t._v("11")]),r("br"),r("span",{staticClass:"line-number"},[t._v("12")]),r("br"),r("span",{staticClass:"line-number"},[t._v("13")]),r("br"),r("span",{staticClass:"line-number"},[t._v("14")]),r("br"),r("span",{staticClass:"line-number"},[t._v("15")]),r("br"),r("span",{staticClass:"line-number"},[t._v("16")]),r("br"),r("span",{staticClass:"line-number"},[t._v("17")]),r("br"),r("span",{staticClass:"line-number"},[t._v("18")]),r("br")])]),r("p",[t._v("一看，这函数前面几个参数都是和线程有关的，后面几个参数都是音视频编解码，很好理解。")])])}),[],!1,null,null,null);e.default=s.exports}}]);