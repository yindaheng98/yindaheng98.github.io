(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{859:function(e,a,s){"use strict";s.r(a);var n=s(4),r=Object(n.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("blockquote",[s("p",[e._v("In the game object that has a "),s("code",[e._v("GaussianSplatRenderer")]),e._v(" script, "),s("strong",[e._v("point the Asset field to")]),e._v(" one of your created assets.")])]),e._v(" "),s("p",[e._v("按照 README 所述，主要调用逻辑位于 "),s("a",{attrs:{href:"https://github.com/aras-p/UnityGaussianSplatting/blob/2f371e121db7c56159be634545d5bf9c5b2ce55b/package/Runtime/GaussianSplatRenderer.cs",target:"_blank",rel:"noopener noreferrer"}},[e._v("package/Runtime/GaussianSplatRenderer.cs"),s("OutboundLink")],1),e._v(" 中，将 "),s("code",[e._v("GaussianSplatRenderer.cs")]),e._v(" 脚本绑定到任意 Game Object 上并且将3DGS文件设置为其 Assert 即可实现3DGS渲染。")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/aras-p/UnityGaussianSplatting/blob/2f371e121db7c56159be634545d5bf9c5b2ce55b/package/Runtime/GaussianSplatRenderer.cs",target:"_blank",rel:"noopener noreferrer"}},[e._v("package/Runtime/GaussianSplatRenderer.cs"),s("OutboundLink")],1),e._v(" 有两个类："),s("code",[e._v("GaussianSplatRenderSystem")]),e._v(" 类和其内部的 "),s("code",[e._v("GaussianSplatRenderer")]),e._v(" 类。\n其中，"),s("code",[e._v("GaussianSplatRenderSystem")]),e._v(" 类为单例类，全局唯一，通过 "),s("code",[e._v("GaussianSplatRenderSystem.instance")]),e._v(" 进行调用；而每个3DGS对象上都会绑定一个 "),s("code",[e._v("GaussianSplatRenderer")]),e._v(" 类，"),s("code",[e._v("GaussianSplatRenderer")]),e._v(" 类通过调用全局唯一的 "),s("code",[e._v("GaussianSplatRenderSystem")]),e._v(" 单例类的类方法执行渲染操作，从而实现所有3DGS对象中的Gaussians统统合并到一起进行渲染。")]),e._v(" "),s("h2",{attrs:{id:"gaussiansplatrenderer-onenable-中的初始化过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gaussiansplatrenderer-onenable-中的初始化过程"}},[e._v("#")]),e._v(" "),s("code",[e._v("GaussianSplatRenderer.OnEnable")]),e._v(" 中的初始化过程")]),e._v(" "),s("p",[e._v("3DGS渲染初始化过程位于 "),s("code",[e._v("GaussianSplatRenderer.OnEnable")]),e._v(" 中：")]),e._v(" "),s("div",{staticClass:"language-c# line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public void OnEnable()\n{\n    m_FrameCounter = 0;\n    if (!resourcesAreSetUp)\n        return;\n\n    EnsureMaterials();\n    EnsureSorterAndRegister();\n\n    CreateResourcesForAsset();\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("p",[e._v("可见其包含三项步骤："),s("code",[e._v("EnsureMaterials")]),e._v(" 初始化材质、"),s("code",[e._v("EnsureSorterAndRegister")]),e._v(" 注册 Gaussians 并初始化排序 "),s("code",[e._v("CreateResourcesForAsset")]),e._v(" 创建渲染时要用到的相关资源。")]),e._v(" "),s("p",[s("code",[e._v("EnsureMaterials")]),e._v(" 初始化了一批材质：")]),e._v(" "),s("div",{staticClass:"language-c# line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('public void EnsureMaterials()\n{\n    if (m_MatSplats == null && resourcesAreSetUp)\n    {\n        m_MatSplats = new Material(m_ShaderSplats) {name = "GaussianSplats"};\n        m_MatComposite = new Material(m_ShaderComposite) {name = "GaussianClearDstAlpha"};\n        m_MatDebugPoints = new Material(m_ShaderDebugPoints) {name = "GaussianDebugPoints"};\n        m_MatDebugBoxes = new Material(m_ShaderDebugBoxes) {name = "GaussianDebugBoxes"};\n    }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("h3",{attrs:{id:"gaussiansplatrenderer-ensuresorterandregister"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gaussiansplatrenderer-ensuresorterandregister"}},[e._v("#")]),e._v(" "),s("code",[e._v("GaussianSplatRenderer.EnsureSorterAndRegister")])]),e._v(" "),s("p",[s("code",[e._v("EnsureSorterAndRegister")]),e._v(" 初始化了排序用的类并在全局 "),s("code",[e._v("GaussianSplatRenderSystem")]),e._v(" 单例中注册了3DGS对象：")]),e._v(" "),s("div",{staticClass:"language-c# line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("    public void EnsureSorterAndRegister()\n    {\n        if (m_Sorter == null && resourcesAreSetUp)\n        {\n            m_Sorter = new GpuSorting(m_CSSplatUtilities);\n        }\n\n        if (!m_Registered && resourcesAreSetUp)\n        {\n            GaussianSplatRenderSystem.instance.RegisterSplat(this);\n            m_Registered = true;\n        }\n    }\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("p",[e._v("其中，"),s("code",[e._v("GpuSorting")]),e._v(" 是用于GPU排序的类，定义于 "),s("a",{attrs:{href:"https://github.com/aras-p/UnityGaussianSplatting/blob/2f371e121db7c56159be634545d5bf9c5b2ce55b/package/Runtime/GpuSorting.cs",target:"_blank",rel:"noopener noreferrer"}},[e._v("package/Runtime/GpuSorting.cs"),s("OutboundLink")],1),e._v(" 中，包含排序时用到的变量和方法，其底层是调用 "),s("a",{attrs:{href:"https://github.com/aras-p/UnityGaussianSplatting/blob/2f371e121db7c56159be634545d5bf9c5b2ce55b/package/Shaders/DeviceRadixSort.hlsl",target:"_blank",rel:"noopener noreferrer"}},[e._v("package/Shaders/DeviceRadixSort.hlsl"),s("OutboundLink")],1),e._v(" 中定义的几个 Kernel实现GPU并行排序；")]),e._v(" "),s("h3",{attrs:{id:"gaussiansplatrendersystem-registersplat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gaussiansplatrendersystem-registersplat"}},[e._v("#")]),e._v(" "),s("code",[e._v("GaussianSplatRenderSystem.RegisterSplat")])]),e._v(" "),s("p",[s("code",[e._v("RegisterSplat")]),e._v(" 是 "),s("code",[e._v("GaussianSplatRenderSystem")]),e._v(" 中用于注册3DGS对象的方法，具体来说是将 "),s("code",[e._v("GaussianSplatRenderSystem.OnPreCullCamera")]),e._v(" 方法绑定在 "),s("code",[e._v("Camera.onPreCull")]),e._v(" 事件中，并在"),s("code",[e._v("m_Splats")]),e._v("中为当前的 "),s("code",[e._v("GaussianSplatRenderer")]),e._v(" 新建一块 "),s("code",[e._v("MaterialPropertyBlock")]),e._v("：")]),e._v(" "),s("div",{staticClass:"language-c# line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public void RegisterSplat(GaussianSplatRenderer r)\n{\n    if (m_Splats.Count == 0)\n    {\n        if (GraphicsSettings.currentRenderPipeline == null)\n            Camera.onPreCull += OnPreCullCamera;\n    }\n\n    m_Splats.Add(r, new MaterialPropertyBlock());\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("这个 "),s("code",[e._v("OnPreCullCamera")]),e._v(" 函数就是3DGS渲染的主程序，绑定到 "),s("code",[e._v("Camera.onPreCull")]),e._v(" 将令其在摄像机开始裁剪阶段之前被触发，这里的判断条件保证了 "),s("code",[e._v("OnPreCullCamera")]),e._v(" 只被绑定一次；"),s("code",[e._v("MaterialPropertyBlock")]),e._v(" 是Unity提供的一种轻量级容器，用于存储材质属性的覆盖值。它允许开发者为单个Renderer实例设置特定的材质属性值，同时保持原始材质的共享引用，维护GPU批处理的优势；"),s("code",[e._v("m_Splats")]),e._v(" 是 "),s("code",[e._v("GaussianSplatRenderSystem")]),e._v(" 一个以"),s("code",[e._v("GaussianSplatRenderer")]),e._v(" 为key，"),s("code",[e._v("MaterialPropertyBlock")]),e._v(" 为value的"),s("code",[e._v("Dictionary")]),e._v("，它通过 "),s("code",[e._v("RegisterSplat")]),e._v(" 记录了场景中的所有3DGS对象。")]),e._v(" "),s("h3",{attrs:{id:"gaussiansplatrenderer-createresourcesforasset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gaussiansplatrenderer-createresourcesforasset"}},[e._v("#")]),e._v(" "),s("code",[e._v("GaussianSplatRenderer.CreateResourcesForAsset")])]),e._v(" "),s("p",[s("code",[e._v("CreateResourcesForAsset")]),e._v(" 根据Gaussians的数量 "),s("code",[e._v("m_SplatCount = asset.splatCount")]),e._v(" 初始化了几个GPU Buffer "),s("code",[e._v("m_GpuPosData")]),e._v("、"),s("code",[e._v("m_GpuOtherData")]),e._v("、"),s("code",[e._v("m_GpuSHData")]),e._v("、"),s("code",[e._v("m_GpuColorData")]),e._v("、"),s("code",[e._v("m_GpuChunks")]),e._v("，"),s("code",[e._v("m_GpuIndexBuffer")]),e._v("，调用从"),s("code",[e._v("asset.xxXX.GetData")]),e._v(" 读取数据并用 "),s("code",[e._v("GetData")]),e._v(" 给这些GPU Buffer设置了数据，最后调用 "),s("code",[e._v("InitSortBuffers")]),e._v(" 初始化了GPU排序用到的各种Buffers：")]),e._v(" "),s("div",{staticClass:"language-c# line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('void CreateResourcesForAsset()\n{\n    if (!HasValidAsset)\n        return;\n\n    m_SplatCount = asset.splatCount;\n    m_GpuPosData = new GraphicsBuffer(GraphicsBuffer.Target.Raw | GraphicsBuffer.Target.CopySource, (int) (asset.posData.dataSize / 4), 4) { name = "GaussianPosData" };\n    m_GpuPosData.SetData(asset.posData.GetData<uint>());\n    m_GpuOtherData = new GraphicsBuffer(GraphicsBuffer.Target.Raw | GraphicsBuffer.Target.CopySource, (int) (asset.otherData.dataSize / 4), 4) { name = "GaussianOtherData" };\n    m_GpuOtherData.SetData(asset.otherData.GetData<uint>());\n    m_GpuSHData = new GraphicsBuffer(GraphicsBuffer.Target.Raw, (int) (asset.shData.dataSize / 4), 4) { name = "GaussianSHData" };\n    m_GpuSHData.SetData(asset.shData.GetData<uint>());\n    var (texWidth, texHeight) = GaussianSplatAsset.CalcTextureSize(asset.splatCount);\n    var texFormat = GaussianSplatAsset.ColorFormatToGraphics(asset.colorFormat);\n    var tex = new Texture2D(texWidth, texHeight, texFormat, TextureCreationFlags.DontInitializePixels | TextureCreationFlags.IgnoreMipmapLimit | TextureCreationFlags.DontUploadUponCreate) { name = "GaussianColorData" };\n    tex.SetPixelData(asset.colorData.GetData<byte>(), 0);\n    tex.Apply(false, true);\n    m_GpuColorData = tex;\n    if (asset.chunkData != null && asset.chunkData.dataSize != 0)\n    {\n        m_GpuChunks = new GraphicsBuffer(GraphicsBuffer.Target.Structured,\n            (int) (asset.chunkData.dataSize / UnsafeUtility.SizeOf<GaussianSplatAsset.ChunkInfo>()),\n            UnsafeUtility.SizeOf<GaussianSplatAsset.ChunkInfo>()) {name = "GaussianChunkData"};\n        m_GpuChunks.SetData(asset.chunkData.GetData<GaussianSplatAsset.ChunkInfo>());\n        m_GpuChunksValid = true;\n    }\n    else\n    {\n        // just a dummy chunk buffer\n        m_GpuChunks = new GraphicsBuffer(GraphicsBuffer.Target.Structured, 1,\n            UnsafeUtility.SizeOf<GaussianSplatAsset.ChunkInfo>()) {name = "GaussianChunkData"};\n        m_GpuChunksValid = false;\n    }\n\n    m_GpuView = new GraphicsBuffer(GraphicsBuffer.Target.Structured, m_Asset.splatCount, kGpuViewDataSize);\n    m_GpuIndexBuffer = new GraphicsBuffer(GraphicsBuffer.Target.Index, 36, 2);\n    // cube indices, most often we use only the first quad\n    m_GpuIndexBuffer.SetData(new ushort[]\n    {\n        0, 1, 2, 1, 3, 2,\n        4, 6, 5, 5, 6, 7,\n        0, 2, 4, 4, 2, 6,\n        1, 5, 3, 5, 7, 3,\n        0, 4, 1, 4, 5, 1,\n        2, 3, 6, 3, 7, 6\n    });\n\n    InitSortBuffers(splatCount);\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br"),s("span",{staticClass:"line-number"},[e._v("40")]),s("br"),s("span",{staticClass:"line-number"},[e._v("41")]),s("br"),s("span",{staticClass:"line-number"},[e._v("42")]),s("br"),s("span",{staticClass:"line-number"},[e._v("43")]),s("br"),s("span",{staticClass:"line-number"},[e._v("44")]),s("br"),s("span",{staticClass:"line-number"},[e._v("45")]),s("br"),s("span",{staticClass:"line-number"},[e._v("46")]),s("br"),s("span",{staticClass:"line-number"},[e._v("47")]),s("br"),s("span",{staticClass:"line-number"},[e._v("48")]),s("br"),s("span",{staticClass:"line-number"},[e._v("49")]),s("br")])]),s("p",[e._v("其中用到的"),s("code",[e._v("asset")]),e._v(" 变量为 "),s("code",[e._v("GaussianSplatAsset")]),e._v(" 类，"),s("code",[e._v("GaussianSplatAsset")]),e._v(" 定义于"),s("a",{attrs:{href:"https://github.com/aras-p/UnityGaussianSplatting/blob/2f371e121db7c56159be634545d5bf9c5b2ce55b/package/Runtime/GaussianSplatAsset.cs",target:"_blank",rel:"noopener noreferrer"}},[e._v("package/Runtime/GaussianSplatAsset.cs"),s("OutboundLink")],1),e._v("，继承于 "),s("code",[e._v("ScriptableObject")]),e._v("。")]),e._v(" "),s("blockquote",[s("p",[s("code",[e._v("ScriptableObject")]),e._v(" 是 Unity 提供的一个数据配置存储基类，是一个可以用来保存大量数据的数据容器，我们可以将它保存为自定义的数据资源文件。\n"),s("code",[e._v("ScriptableObject")]),e._v(" 类的实例会被保存成资源文件（"),s("code",[e._v(".asset")]),e._v("文件），和预制体，材质球，音频文件等类似，都是一种资源文件，存放在 "),s("code",[e._v("Assets")]),e._v(" 文件夹下，创建出来的实例也是唯一存在的。")])]),e._v(" "),s("h2",{attrs:{id:"gaussiansplatrendersystem-onprecullcamera-中的渲染主程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gaussiansplatrendersystem-onprecullcamera-中的渲染主程序"}},[e._v("#")]),e._v(" "),s("code",[e._v("GaussianSplatRenderSystem.OnPreCullCamera")]),e._v(" 中的渲染主程序")]),e._v(" "),s("p",[e._v("在 "),s("code",[e._v("OnEnable")]),e._v(" 中绑定的 "),s("code",[e._v("OnPreCullCamera")]),e._v(" 函数为3DGS渲染的主程序，核心思想就是使用 Unity 中提供的"),s("code",[e._v("CommandBuffer")]),e._v(" 对渲染管线进行扩展，在渲染过程中插入3DGS的渲染逻辑：")]),e._v(" "),s("div",{staticClass:"language-c# line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("void OnPreCullCamera(Camera cam)\n{\n    if (!GatherSplatsForCamera(cam))\n        return;\n\n    InitialClearCmdBuffer(cam);\n\n    m_CommandBuffer.GetTemporaryRT(GaussianSplatRenderer.Props.GaussianSplatRT, -1, -1, 0, FilterMode.Point, GraphicsFormat.R16G16B16A16_SFloat);\n    m_CommandBuffer.SetRenderTarget(GaussianSplatRenderer.Props.GaussianSplatRT, BuiltinRenderTextureType.CurrentActive);\n    m_CommandBuffer.ClearRenderTarget(RTClearFlags.Color, new Color(0, 0, 0, 0), 0, 0);\n\n    // We only need this to determine whether we're rendering into backbuffer or not. However, detection this\n    // way only works in BiRP so only do it here.\n    m_CommandBuffer.SetGlobalTexture(GaussianSplatRenderer.Props.CameraTargetTexture, BuiltinRenderTextureType.CameraTarget);\n\n    // add sorting, view calc and drawing commands for each splat object\n    Material matComposite = SortAndRenderSplats(cam, m_CommandBuffer);\n\n    // compose\n    m_CommandBuffer.BeginSample(s_ProfCompose);\n    m_CommandBuffer.SetRenderTarget(BuiltinRenderTextureType.CameraTarget);\n    m_CommandBuffer.DrawProcedural(Matrix4x4.identity, matComposite, 0, MeshTopology.Triangles, 3, 1);\n    m_CommandBuffer.EndSample(s_ProfCompose);\n    m_CommandBuffer.ReleaseTemporaryRT(GaussianSplatRenderer.Props.GaussianSplatRT);\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br")])]),s("h3",{attrs:{id:"gaussiansplatrendersystem-gathersplatsforcamera"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gaussiansplatrendersystem-gathersplatsforcamera"}},[e._v("#")]),e._v(" "),s("code",[e._v("GaussianSplatRenderSystem.GatherSplatsForCamera")])]),e._v(" "),s("p",[s("code",[e._v("GatherSplatsForCamera")]),e._v(" 从 "),s("code",[e._v("m_Splats")]),e._v(" 中取出所有需要渲染的3DGS对象放入 "),s("code",[e._v("m_ActiveSplats")]),e._v(" 并对其按 "),s("code",[e._v("m_RenderOrder")]),e._v(" 或其距离相机的远近进行排序：")]),e._v(" "),s("div",{staticClass:"language-c# line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public bool GatherSplatsForCamera(Camera cam)\n{\n    if (cam.cameraType == CameraType.Preview)\n        return false;\n    // gather all active & valid splat objects\n    m_ActiveSplats.Clear();\n    foreach (var kvp in m_Splats)\n    {\n        var gs = kvp.Key;\n        if (gs == null || !gs.isActiveAndEnabled || !gs.HasValidAsset || !gs.HasValidRenderSetup)\n            continue;\n        m_ActiveSplats.Add((kvp.Key, kvp.Value));\n    }\n    if (m_ActiveSplats.Count == 0)\n        return false;\n\n    // sort them by order and depth from camera\n    var camTr = cam.transform;\n    m_ActiveSplats.Sort((a, b) =>\n    {\n        var orderA = a.Item1.m_RenderOrder;\n        var orderB = b.Item1.m_RenderOrder;\n        if (orderA != orderB)\n            return orderB.CompareTo(orderA);\n        var trA = a.Item1.transform;\n        var trB = b.Item1.transform;\n        var posA = camTr.InverseTransformPoint(trA.position);\n        var posB = camTr.InverseTransformPoint(trB.position);\n        return posA.z.CompareTo(posB.z);\n    });\n\n    return true;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br")])]),s("p",[e._v("这里的 "),s("code",[e._v("m_RenderOrder")]),e._v(" 是3DGS对象上的一个可调变量，用于手动控制多个3DGS对象的渲染顺序：")]),e._v(" "),s("div",{staticClass:"language-c# line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('public int m_RenderOrder;\n[Range(0.1f, 2.0f)] [Tooltip("Additional scaling factor for the splats")]\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"gaussiansplatrendersystem-initialclearcmdbuffer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gaussiansplatrendersystem-initialclearcmdbuffer"}},[e._v("#")]),e._v(" "),s("code",[e._v("GaussianSplatRenderSystem.InitialClearCmdBuffer")])]),e._v(" "),s("p",[s("code",[e._v("InitialClearCmdBuffer")]),e._v(" 创建了一个 "),s("code",[e._v("CommandBuffer")]),e._v(" 对象并将其绑定到相机的 "),s("code",[e._v("CameraEvent.BeforeForwardAlpha")]),e._v(" 事件上，并通过判断条件保证每个相机只绑定一次：")]),e._v(" "),s("div",{staticClass:"language-c# line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('public CommandBuffer InitialClearCmdBuffer(Camera cam)\n{\n    m_CommandBuffer ??= new CommandBuffer {name = "RenderGaussianSplats"};\n    if (GraphicsSettings.currentRenderPipeline == null && cam != null && !m_CameraCommandBuffersDone.Contains(cam))\n    {\n        cam.AddCommandBuffer(CameraEvent.BeforeForwardAlpha, m_CommandBuffer);\n        m_CameraCommandBuffersDone.Add(cam);\n    }\n\n    // get render target for all splats\n    m_CommandBuffer.Clear();\n    return m_CommandBuffer;\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("p",[e._v("其中，"),s("code",[e._v("CommandBuffer")]),e._v(" ‌是Unity提供的GPU渲染命令列表，可以延迟提交渲染指令，减少CPU/GPU负担，批量执行DrawCall，避免CPU过度调用API，它支持插入自定义渲染指令，如深度处理、后处理效果，并且可以脱离GameObject直接控制渲染，如画辅助线、调试网格等；"),s("code",[e._v("CameraEvent.BeforeForwardAlpha")]),e._v(" 是在Unity中用于指定摄像机渲染事件的一个枚举值，它表示在渲染透明对象之前执行的操作。")]),e._v(" "),s("blockquote",[s("p",[e._v("在Unity渲染管线中，前向渲染路径通常包括以下几个主要阶段：‌不透明物体渲染 ‌-> ‌透明物体渲染‌ -> 后期效果处理‌。"),s("code",[e._v("CameraEvent.BeforeForwardAlpha")]),e._v("‌ 允许你在透明物体渲染之前插入自定义的渲染命令或效果。这可以用于在透明物体渲染之前执行一些特殊的处理，比如添加额外的光照效果、修改场景的某些部分等‌。")])]),e._v(" "),s("h3",{attrs:{id:"gaussiansplatrendersystem-onprecullcamera-剩余部分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gaussiansplatrendersystem-onprecullcamera-剩余部分"}},[e._v("#")]),e._v(" "),s("code",[e._v("GaussianSplatRenderSystem.OnPreCullCamera")]),e._v(" 剩余部分")]),e._v(" "),s("p",[e._v("渲染纹理 (Render Texture) 是一种 Unity 在运行时创建和更新的纹理。你可以在其上绘制，然后像使用其它纹理一样使用。渲染纹理的一个典型应用是镜面的渲染，例如汽车的后视镜就可以贴一个Render Texture，它是从这个镜子所对应视角的摄像机渲染而来。\n而3DGS对象的渲染过程就是使用 Render Texture 实现的。")]),e._v(" "),s("h4",{attrs:{id:"设置渲染纹理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置渲染纹理"}},[e._v("#")]),e._v(" 设置渲染纹理")]),e._v(" "),s("div",{staticClass:"language-c# line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("    m_CommandBuffer.GetTemporaryRT(GaussianSplatRenderer.Props.GaussianSplatRT, -1, -1, 0, FilterMode.Point, GraphicsFormat.R16G16B16A16_SFloat);\n    m_CommandBuffer.SetRenderTarget(GaussianSplatRenderer.Props.GaussianSplatRT, BuiltinRenderTextureType.CurrentActive);\n    m_CommandBuffer.ClearRenderTarget(RTClearFlags.Color, new Color(0, 0, 0, 0), 0, 0);\n\n    // We only need this to determine whether we're rendering into backbuffer or not. However, detection this\n    // way only works in BiRP so only do it here.\n    m_CommandBuffer.SetGlobalTexture(GaussianSplatRenderer.Props.CameraTargetTexture, BuiltinRenderTextureType.CameraTarget);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("这里调用的 "),s("code",[e._v("GetTemporaryRT")]),e._v(" 就是分配一段 Render Texture 内存空间用于渲染 Render Texture。\n查阅 Unity 文档中关于 "),s("code",[e._v("GetTemporaryRT")]),e._v(" 的部分可以知道这里输入的几个参数的含义：")]),e._v(" "),s("ol",[s("li",[s("code",[e._v("nameID")]),e._v(" 为这个 Render Texture 的 ID，"),s("code",[e._v("GetTemporaryRT")]),e._v("对相同的 "),s("code",[e._v("nameID")]),e._v(" 会返回同一段 Render Texture 内存空间，避免重复申请和销毁")]),e._v(" "),s("li",[s("code",[e._v("width")]),e._v(" 和 "),s("code",[e._v("height")]),e._v(" 是这个 Render Texture 的长宽，这里设置为 "),s("code",[e._v("-1")]),e._v(" 表示使用 "),s("code",[e._v("CommandBuffer")]),e._v(" 所绑定的相机的长宽；")]),e._v(" "),s("li",[s("code",[e._v("depthBuffer")]),e._v(" 设置为 "),s("code",[e._v("0")]),e._v(" 表示这个 Render Texture 没有深度信息；")]),e._v(" "),s("li",[s("code",[e._v("filter")]),e._v(" 是纹理采样模式，设置为 "),s("code",[e._v("FilterMode.Point")]),e._v(" 表示点采样模式，在这种模式下，屏幕上的像素会寻找最近的贴图像素点作为输出，这种采样方式比较生硬，但性能较好，由于直接使用了相机的长宽，这个 Render Texture 的像素和输出图像的像素一一对应，不需要考虑采样问题，所以用最快的采样方法；")]),e._v(" "),s("li",[s("code",[e._v("format")]),e._v(" 设置为 "),s("code",[e._v("GraphicsFormat.R16G16B16A16_SFloat")]),e._v(" 表示 Render Texture 的像素RGBA均为16位浮点数。")])]),e._v(" "),s("p",[e._v("接下来的 "),s("code",[e._v("SetRenderTarget")]),e._v(" 为 "),s("code",[e._v("m_CommandBuffer")]),e._v(" 设置了输出位置，表示将 "),s("code",[e._v("m_CommandBuffer")]),e._v(" 的渲染结果放入上面申请的 Render Texture 中；\n"),s("code",[e._v("ClearRenderTarget")]),e._v(" 即清空这个 Render Texture 开始新一轮渲染；\n最后 "),s("code",[e._v("SetGlobalTexture")]),e._v(" 将这个 Render Texture 设置为全局 Texture 以供其他着色器使用。")]),e._v(" "),s("h4",{attrs:{id:"执行渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行渲染"}},[e._v("#")]),e._v(" 执行渲染")]),e._v(" "),s("div",{staticClass:"language-c# line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("    // add sorting, view calc and drawing commands for each splat object\n    Material matComposite = SortAndRenderSplats(cam, m_CommandBuffer);\n\n    // compose\n    m_CommandBuffer.BeginSample(s_ProfCompose);\n    m_CommandBuffer.SetRenderTarget(BuiltinRenderTextureType.CameraTarget);\n    m_CommandBuffer.DrawProcedural(Matrix4x4.identity, matComposite, 0, MeshTopology.Triangles, 3, 1);\n    m_CommandBuffer.EndSample(s_ProfCompose);\n    m_CommandBuffer.ReleaseTemporaryRT(GaussianSplatRenderer.Props.GaussianSplatRT);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])])])}),[],!1,null,null,null);a.default=r.exports}}]);