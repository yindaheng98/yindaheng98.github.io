(window.webpackJsonp=window.webpackJsonp||[]).push([[246],{922:function(s,a,t){"use strict";t.r(a);var e=t(4),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"合并-commit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#合并-commit"}},[s._v("#")]),s._v(" 合并 commit")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/qq_39253370/article/details/124277214",target:"_blank",rel:"noopener noreferrer"}},[s._v("原文在此"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("在项目开发时，每天会提交大量的代码，也会有很多 commit 记录，那么要不要处理这些 commit 记录。\n当然不处理这些 commit 记录也能进行代码合并，就是记录有点多，并且每个 commit 可能获知的信息不那么全，如果合并一下这些 commit 并添加一些这些 commit 的总的概览，这样看起来 commit 记录也少了很多，并且都是有用的提交记录。")]),s._v(" "),t("p",[s._v("git log: 查看提交历史")]),s._v(" "),t("p",[t("img",{attrs:{src:"i/77f90f3ccf7c467a816b7fa8973317c7.png",alt:""}})]),s._v(" "),t("p",[s._v("上述有五个 commit 记录。如果我想合并四个 commit 记录：")]),s._v(" "),t("p",[t("code",[s._v("git rebase -i HEAD~4")]),s._v(" 合并前面四个 commit 记录")]),s._v(" "),t("p",[s._v("也可以指定合并某个版本之前的版本："),t("code",[s._v("git rebase -i 3a4226b")]),s._v(" 但不包含 "),t("code",[s._v("3a4226b")]),s._v("，至合并他之前的。")]),s._v(" "),t("p",[s._v("执行了 rebase 之后会弹出一个窗口，让你选择合并哪些 commit 记录")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("pick 3ca6ec3   '注释**********'\npick 1b40566   '注释*********'\npick 53f244a   '注释**********'\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("需要把 pick 改为 s 或 squash，需要留第一个，第一个不要改，意思是下面的 commit 记录都合并到第一个上面去。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("pick 3ca6ec3   '注释**********'\ns 1b40566   '注释*********'\ns 53f244a   '注释**********'\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("保存退出")]),s._v(" "),t("p",[s._v("如果有冲突，可以先解决冲突，解决完之后执行：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" rebase --continue\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("如果不想执行或者想放弃的话可以执行：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" rebase --abort\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果没有冲突，或者冲突已经解决，会弹出窗口，让你注释掉一些提交记录，这里是让我们编辑自己合并的这些记录的概览，如：完成了什么功能，按照实际情况填写。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("# This is a combination of 4 commits.  \n# 写上合并的这些 commit 做了什么事，如：\n完成了 api 的编写：\n\t1. 完成了用户相关的 api 编写\n\t2. 完成了用户列表相关 api 编写\n\n# 下面的都注释\n# The first commit’s message is:  \n# 注释......\n# The 2nd commit’s message is:  \n# 注释......\n# The 3rd commit’s message is:  \n# 注释......\n# Please enter the commit message for your changes. Lines starting # with ‘#’ will be ignored, and an empty message aborts the commit.\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("保存退出，按下 esc 再按 ：然后输入 wq 或 x 保存")]),s._v(" "),t("p",[s._v("如图：有 "),t("code",[s._v("Successfully rebased and updated")]),s._v(" 字样就代表合并成功了")]),s._v(" "),t("p",[t("img",{attrs:{src:"i/9cbd4da308614dba801cab2dec2cb4e3.png",alt:""}})]),s._v(" "),t("p",[s._v("上述操作完成之后可以执行 git log 看看记录。")]),s._v(" "),t("p",[s._v("原来五条，合并了前面四条，还有两条。")]),s._v(" "),t("p",[t("img",{attrs:{src:"i/2cfd95a9ee5b415b90baf13015be1ed9.png",alt:""}})]),s._v(" "),t("h2",{attrs:{id:"修改-commit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改-commit"}},[s._v("#")]),s._v(" 修改 commit")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/uolcano/blog/issues/12",target:"_blank",rel:"noopener noreferrer"}},[s._v("原文在此"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("git虽好，但总会遇到一些不希望的提交，所以就会有增删改某次或某些提交的需求。下面收集一下，修改本地和远程版本历史的一些方法。")]),s._v(" "),t("p",[s._v("由于以下修改本身是对版本历史的修改，在需要push到远程仓库时，往往是不成功的，只能强行push，这样会出现的一个问题就是，如果你是push到多人协作的远程仓库中，会对其他人的远程操作构成影响。通常情况下，建议与项目远程仓库的管理员进行沟通，在完成你强制push操作后，通知其他人同步。")]),s._v(" "),t("h3",{attrs:{id:"修改最近一次的commit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改最近一次的commit"}},[s._v("#")]),s._v(" 修改最近一次的commit")]),s._v(" "),t("p",[s._v("修改提交的描述")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit --amend\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("然后会进入一个文本编辑器界面，修改commit的描述内容，即可完成操作。")]),s._v(" "),t("p",[s._v("修改提交的文件")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("filename"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或者 git rm")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit --amend "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将缓存区的内容做为最近一次提交")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h2",{attrs:{id:"修改任意提交历史位置的commit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改任意提交历史位置的commit"}},[s._v("#")]),s._v(" 修改任意提交历史位置的commit")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://stackoverflow.com/a/1186549/23652839",target:"_blank",rel:"noopener noreferrer"}},[s._v("原文在此"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("可以通过变基命令，修改最近一次提交以前的某次提交。不过修改的提交到当前提交之间的所有提交的hash值都会改变。\n变基操作需要非常小心，一定要多用"),t("code",[s._v("git status")]),s._v("命令来查看你是否还处于变基操作，可能某次误操作的会对后面的提交历史造成很大影响。")]),s._v(" "),t("p",[s._v("首先查看提交日志，以便变基后，确认提交历史的修改")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("变基操作。 可以用"),t("code",[s._v("commit~n")]),s._v("或"),t("code",[s._v("commit^^")]),s._v("这种形式替代：前者表示当前提交到n次以前的提交，后者^符号越多表示的范围越大，commit可以是HEAD或者某次提交的hash值；"),t("code",[s._v("-i")]),s._v("参数表示进入交互模式。")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" rebase -i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("commit range"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("以上变基命令会进入文本编辑器，其中每一行就是某次提交，把"),t("code",[s._v("pick")]),s._v("修改为"),t("code",[s._v("edit")]),s._v("，保存退出该文本编辑器。")]),s._v(" "),t("p",[t("strong",[s._v("注意：")]),s._v(" 变基命令打开的文本编辑器中的commit顺序跟"),t("code",[s._v("git log")]),s._v("查看的顺序是相反的，也就是最近的提交在下面，老旧的提交在上面")]),s._v(" "),t("p",[t("strong",[s._v("注意：")]),s._v(" 变基命令其实可以同时对多个提交进行修改，只需要修改将对应行前的"),t("code",[s._v("pick")]),s._v("都修改为"),t("code",[s._v("edit")]),s._v("，保存退出后会根据你修改的数目多次打开修改某次commit的文本编辑器界面。但是这个范围内的最终祖先commit不能修改，也就是如果有5行commit信息，你只能修改下面4行的，这不仅限于commit修改，重排、删除以及合并都如此。")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit --amend\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("接下来修改提交描述内容或者文件内容，跟最近一次的commit的操作相同，不赘述。或直接不修改commit信息：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit --all --amend --no-edit\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("然后完成变基操作")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" rebase --continue\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("有时候会完成变基失败，需要git add --all才能解决，一般git会给出提示。")]),s._v(" "),t("p",[s._v("再次查看提交日志，对比变基前后的修改，可以看到的内的所有提交的hash值都被修改了")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果过了一段时间后，你发现这次历史修改有误，想退回去怎么办？请往下继续阅读")]),s._v(" "),t("p",[s._v("重排或删除某些提交")]),s._v(" "),t("p",[s._v("变基命令非常强大，还可以将提交历史重新手动排序或者删除某次提交。这为某些误操作，导致不希望公开信息的提交，提供了补救措施")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" rebase -i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("commit range"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如前面描述，这会进入文本编辑器，对某行提交进行排序或者删除，保存退出。可以是多行修改。")]),s._v(" "),t("p",[s._v("后续操作同上。")]),s._v(" "),t("h2",{attrs:{id:"合并多次提交"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#合并多次提交"}},[s._v("#")]),s._v(" 合并多次提交")]),s._v(" "),t("p",[s._v("非关键性的提交太多会让版本历史很难看、冗余，所以合并多次提交也是挺有必要的。同样是使用以上的变基命令，不同的是变基命令打开的文本编辑器里的内容的修改。")]),s._v(" "),t("p",[s._v("将pick修改为squash，可以是多行修改，然后保存退出。这个操作会将标记为squash的所有提交，都合并到最近的一个祖先提交上。")]),s._v(" "),t("p",[t("strong",[s._v("注意：")]),s._v(" 不能对的第一行commit进行修改，至少保证第一行是接受合并的祖先提交。")]),s._v(" "),t("p",[s._v("后续操作同上。")]),s._v(" "),t("h2",{attrs:{id:"分离某次提交"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分离某次提交"}},[s._v("#")]),s._v(" 分离某次提交")]),s._v(" "),t("p",[s._v("变基命令还能分离提交，这里不描述，详情查看后面的参考链接")]),s._v(" "),t("p",[s._v("终极手段")]),s._v(" "),t("p",[s._v("git还提供了修改版本历史的“大杀器”——"),t("code",[s._v("filter-branch")]),s._v("，可以对整个版本历史中的每次提交进行修改，可用于删除误操作提交的密码等敏感信息。")]),s._v(" "),t("p",[s._v("删除所有提交中的某个文件")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" filter-branch --treefilter "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'rm -f password.txt'")]),s._v(" HEAD\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("将新建的主目录作为所有提交的根目录")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" filter-branch --subdirectory-filter trunk HEAD\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[s._v("#")]),s._v(" 注意事项")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/orgs/community/discussions/22695#discussioncomment-3237743",target:"_blank",rel:"noopener noreferrer"}},[s._v("原文在此"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("一个Commit被修改了，其后的所有Commit都需要修改（内容发生变化），而rebase操作在修改Commit时会在CommitDate里面记录下其修改时间，就像下面这样。\n输入"),t("code",[s._v("git log --format=fuller")]),s._v("看时间：")]),s._v(" "),t("p",[t("img",{attrs:{src:"i/CommitDate.png",alt:""}})]),s._v(" "),t("p",[s._v("这里的"),t("code",[s._v("AuthorDate")]),s._v("就是Commit创建的时间"),t("code",[s._v("CommitDate")]),s._v("在这个Commit被修改时就会更新。")]),s._v(" "),t("p",[t("code",[s._v("git log")]),s._v("里看到的是"),t("code",[s._v("AuthorDate")]),s._v("，GitHub上的History里看到的是"),t("code",[s._v("CommitDate")]),s._v("，使用时需要注意。")]),s._v(" "),t("p",[s._v("如果不想时间被修改，可以在rebase时带个参数：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" rebase --committer-date-is-author-date\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("或者也可以在rebase后把时间改回去：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" filter-branch --env-filter "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'export GIT_COMMITTER_DATE=\""),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$GIT_AUTHOR_DATE")]),s._v("\"'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);