(window.webpackJsonp=window.webpackJsonp||[]).push([[204],{881:function(v,_,e){"use strict";e.r(_);var i=e(4),s=Object(i.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h2",{attrs:{id:"服务拆分-decomposition"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务拆分-decomposition"}},[v._v("#")]),v._v(" 服务拆分(Decomposition)")]),v._v(" "),e("p",[v._v("如何把应用拆分为若干个服务？如何界定服务的范围？")]),v._v(" "),e("h3",{attrs:{id:"根据业务能力拆分（decompose-by-business-capability）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#根据业务能力拆分（decompose-by-business-capability）"}},[v._v("#")]),v._v(" 根据业务能力拆分（Decompose by business capability）")]),v._v(" "),e("p",[v._v("根据业务能力界定服务的范围，这两条原则都来自面向对象思想。")]),v._v(" "),e("ul",[e("li",[v._v("单一职责原则(Single Responsibility Principle, SRP)：一个类应只有一个需要被修改的理由（如果一个类具有多个不同的职责，那么就会有多个不同的原因使程序员修改这个类，而这种修改将影响到该类不同职责的使用者）。")]),v._v(" "),e("li",[v._v("共同封闭原则(Common Closure Principle, CCP)：将那些会因为同一种原因进行修改的类放在一个微服务里。当业务规则发生变化时，只需要修改很少量的代码——理想情况是只需要修改一个微服务的代码。")])]),v._v(" "),e("h3",{attrs:{id:"根据领域的子域拆分（decompose-by-subdomain）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#根据领域的子域拆分（decompose-by-subdomain）"}},[v._v("#")]),v._v(" 根据领域的子域拆分（Decompose by subdomain）")]),v._v(" "),e("p",[v._v("根据领域驱动设计中子域的概念界定服务的范围")]),v._v(" "),e("h2",{attrs:{id:"部署模式（deployment-patterns）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#部署模式（deployment-patterns）"}},[v._v("#")]),v._v(" 部署模式（Deployment patterns）")]),v._v(" "),e("p",[v._v("如何部署应用程序的服务？微服务的部署应有以下需求：")]),v._v(" "),e("ul",[e("li",[v._v("服务是使用各种不同的语言和不同版本的框架编写的")]),v._v(" "),e("li",[v._v("每个服务都包含多个服务实例，以提高吞吐量和可用性")]),v._v(" "),e("li",[v._v("每个服务都可独立部署和水平扩展")]),v._v(" "),e("li",[v._v("每个服务的实例都与其他实例互相隔离")]),v._v(" "),e("li",[v._v("可限制服务消耗的计算资源")]),v._v(" "),e("li",[v._v("能监控每个服务实例的行为")]),v._v(" "),e("li",[v._v("可快速编译部署")]),v._v(" "),e("li",[v._v("可靠的部署")]),v._v(" "),e("li",[v._v("尽可能低成本的部署")])]),v._v(" "),e("h3",{attrs:{id:"单主机上部署服务的多个实例（multiple-service-instances-per-host）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单主机上部署服务的多个实例（multiple-service-instances-per-host）"}},[v._v("#")]),v._v(" 单主机上部署服务的多个实例（Multiple service instances per host）")]),v._v(" "),e("p",[v._v("把服务的多个实例部署在一台主机上。例如：")]),v._v(" "),e("ul",[e("li",[v._v("将每个服务部署在独立的JVM上，每个服务都独享一个Tomcat或Jetty。")]),v._v(" "),e("li",[v._v("把多个服务部署在一个JVM上，多个服务共用一个Tomcat或Jetty。")])]),v._v(" "),e("p",[v._v("优点：")]),v._v(" "),e("ul",[e("li",[v._v("更有效地利用计算资源")])]),v._v(" "),e("p",[v._v("缺点：")]),v._v(" "),e("ul",[e("li",[v._v("有资源需求冲突的风险，平衡各服务间的计算资源是一个问题")]),v._v(" "),e("li",[v._v("有依赖版本冲突的风险，不能保证所有服务都可以用在一个版本的Tomcat或者Jetty下正常运行")]),v._v(" "),e("li",[v._v("多个服务部署于同一个JVM的时候很难监控单个服务的资源消耗")])]),v._v(" "),e("h3",{attrs:{id:"单主机上部署服务的单个实例（single-service-instance-per-host）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单主机上部署服务的单个实例（single-service-instance-per-host）"}},[v._v("#")]),v._v(" 单主机上部署服务的单个实例（Single service instance per host）")]),v._v(" "),e("p",[v._v("把服务的单一实例部署在它独享的主机上。")]),v._v(" "),e("p",[v._v("优点：")]),v._v(" "),e("ul",[e("li",[v._v("服务实例间都是互相独立的")]),v._v(" "),e("li",[v._v("不存在资源分配问题，每个服务都可以跑满各自的主机")]),v._v(" "),e("li",[v._v("容易监控和管理")])]),v._v(" "),e("p",[v._v("缺点：")]),v._v(" "),e("ul",[e("li",[v._v("计算资源的利用率可能不高")])]),v._v(" "),e("h3",{attrs:{id:"服务实例与虚拟机一一对应（service-instance-per-vm）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务实例与虚拟机一一对应（service-instance-per-vm）"}},[v._v("#")]),v._v(" 服务实例与虚拟机一一对应（Service instance per VM）")]),v._v(" "),e("p",[v._v("把服务的单一实例部署在它独享的虚拟机上。例如：")]),v._v(" "),e("ul",[e("li",[v._v("Netflix将每个服务打包为EC2系统镜像(AMI)并且将其部署为EC2实例。")])]),v._v(" "),e("p",[v._v("优点：")]),v._v(" "),e("ul",[e("li",[v._v("扩展应用的方式非常简单直接。在Amazon Autoscaling Groups上甚至可以按照服务的负载自动进行扩展")]),v._v(" "),e("li",[v._v("虚拟机可以对服务的构建和启动的细节进行封装。例如，封装不同服务的启动过程使得每个服务都以同样的方式启动。")]),v._v(" "),e("li",[v._v("每个服务实例都是独立的")]),v._v(" "),e("li",[v._v("虚拟机可以限制服务消耗的计算资源")]),v._v(" "),e("li",[v._v("一些IaaS服务提供商（例如Amazon）为部署和管理虚拟机提供了"),e("RouterLink",{attrs:{to:"/云计算/AWS.html"}},[v._v("成熟且功能丰富的基础架构")])],1)]),v._v(" "),e("p",[v._v("缺点：")]),v._v(" "),e("ul",[e("li",[v._v("构建虚拟机比构建应用更麻烦")])]),v._v(" "),e("h3",{attrs:{id:"服务实例与容器一一对应（service-instance-per-container）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务实例与容器一一对应（service-instance-per-container）"}},[v._v("#")]),v._v(" 服务实例与容器一一对应（Service instance per Container）")]),v._v(" "),e("p",[v._v("把服务打包为容器镜像，从而将单一实例部署在它独享的容器上。目前用于应用的容器化打包和部署的技术主要是Docker，而部署和管理Docker集群的应用有Kubernetes、Marathon/Mesos、Amazon EC2 Container Service等。")]),v._v(" "),e("p",[v._v("优点：")]),v._v(" "),e("ul",[e("li",[v._v("水平扩展的方式非常直接，只要改变容器实例的数量即可。")]),v._v(" "),e("li",[v._v("容器镜像封装了服务的构建和启动细节")]),v._v(" "),e("li",[v._v("每个服务实例都是独立的")]),v._v(" "),e("li",[v._v("通过容器化可以限制服务消耗的计算资源")]),v._v(" "),e("li",[v._v("容器的构建速度和启动速度远大于虚拟机")])]),v._v(" "),e("p",[v._v("缺点：")]),v._v(" "),e("ul",[e("li",[v._v("部署容器的基础架构不如部署虚拟机的基础架构丰富")])]),v._v(" "),e("h3",{attrs:{id:"无服务器部署（serverless-deployment）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#无服务器部署（serverless-deployment）"}},[v._v("#")]),v._v(" 无服务器部署（Serverless deployment）")]),v._v(" "),e("p",[v._v("使用无服务器部署平台部署服务实例。无服务器部署平台隐藏了后端的所有服务器架构，包括物理和虚拟硬件、操作系统、容器等，部署平台只获取到客户的服务代码和要求的资源限制，客户按照代码运行的资源消耗付费。")]),v._v(" "),e("p",[v._v("无服务器部署服务的代表有AWS Lambda、Google Cloud Functions、Azure Functions等。这些服务面向无状态网络应用，按照事件或请求数等指标收费，服务的运行模式是有请求则调起运行，无请求则暂停。")]),v._v(" "),e("p",[v._v("以AWS Lambda为例。AWS Lambda函数是被调用以处理事件的无状态组件，它要求用户以函数或组件的方式上传一段代码，并为其指定接口名称和计算资源限制。当事件发生时AWS Lambda会自动找到一个可用的实例对事件进行处理，并且还能在大量事件发生时自动增加实例数量以平衡负载。AWS Lambda支持4种事件：")]),v._v(" "),e("ul",[e("li",[v._v("S3 bucket中有对象被创建")]),v._v(" "),e("li",[v._v("DynamoDB表中有数据修改")]),v._v(" "),e("li",[v._v("Kinesis流中有数据到达")]),v._v(" "),e("li",[v._v("Simple email service收到邮件")])]),v._v(" "),e("p",[v._v("AWS Lambda函数还可以配置为AWS Lambda Gateway以处理HTTP请求。在这种模式下，当HTTP请求到达时，AWS Gateway会把请求转化为JSON Object传递给AWS Lambda函数并以函数返回值生成HTTP响应。")]),v._v(" "),e("p",[v._v("AWS Lambda函数还可以配置为定时运行，例如每5分钟运行一次。")]),v._v(" "),e("p",[v._v("优点：")]),v._v(" "),e("ul",[e("li",[v._v("完全不需要在硬件、虚拟机和操作系统等底层组件上耗费时间，专注于代码就好")]),v._v(" "),e("li",[v._v("无状态函数和组件的部署方式赋予其极度的扩展性，服务可以按照负载进行随意扩展")]),v._v(" "),e("li",[v._v("按照请求数或事件数收费的模式无需预估应用的资源消耗")])]),v._v(" "),e("p",[v._v("缺点：")]),v._v(" "),e("ul",[e("li",[v._v("必须按照部署平台的要求写代码，不同的平台可能支持不同的语言或者传递不同的函数参数，需要不同的处理方法")]),v._v(" "),e("li",[v._v("限制了输入的形式，只能对一种或几种固定形式的资源进行响应")]),v._v(" "),e("li",[v._v("不能适应需要较长时间才能启动的应用")]),v._v(" "),e("li",[v._v("不适用于负载波动较大的应用。服务的扩展需要时间，当一个服务的负载波动很大时，无服务器部署平台会疲于实例增减而造成较大延迟")])]),v._v(" "),e("h3",{attrs:{id:"服务部署平台（service-deployment-platform）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务部署平台（service-deployment-platform）"}},[v._v("#")]),v._v(" 服务部署平台（Service deployment platform）")]),v._v(" "),e("p",[v._v("使用提供服务抽象能力的高度自动化部署平台部署服务实例。上述的AWS Lambda即属于此类模式，但是服务部署平台除了可以提供无服务器部署模式外，还可以提供类似例如 Apache 、Nginx、Passenger 和 IIS等的服务环境，相当于将底层架构隐藏到应用容器层，相当于在EC2系统中预装了各种应用框架和一套CI工具进行自动部署。")]),v._v(" "),e("p",[v._v("典型代表AWS Elastic Beanstalk，和AWS Lambda不一样的地方在于AWS Elastic Beanstalk上传的是整个工程项目而不是代码片段，工程将由平台自动进行编译并部署于平台提供的应用容器中，管理和配置服务器、数据库、负载均衡器、防火墙和网络等工作均由 Elastic Beanstalk 代劳。")]),v._v(" "),e("h2",{attrs:{id:"需要关注的边界问题（cross-cutting-concerns）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#需要关注的边界问题（cross-cutting-concerns）"}},[v._v("#")]),v._v(" 需要关注的边界问题（Cross cutting concerns）")]),v._v(" "),e("p",[v._v("如何处理服务实例与外界交互的问题？")]),v._v(" "),e("h3",{attrs:{id:"微服务的基底（microservice-chassis）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#微服务的基底（microservice-chassis）"}},[v._v("#")]),v._v(" 微服务的基底（Microservice chassis）")]),v._v(" "),e("p",[v._v("一个用于服务实例与外界交互和简化服务开发的框架。这样的框架将处理微服务的跨领域问题，跨领域问题包括但不限于：")]),v._v(" "),e("ul",[e("li",[v._v("配置信息外部化：将认证信息、外部服务（数据库、消息代理）位置等的配置信息外部化")]),v._v(" "),e("li",[v._v("日志：配置系统运行日志（log4j等）")]),v._v(" "),e("li",[v._v("健康检查：微服务要能进行自检，并且要提供接口以从外部获取健康状态")]),v._v(" "),e("li",[v._v("状态监控：微服务要能监控自身的运行状态（正在执行什么任务、当前资源占用等），并且要提供接口以从外部获取运行状态")]),v._v(" "),e("li",[v._v("分布式跟踪：为每个外部请求分配一个在服务之间传递的唯一标识符")]),v._v(" "),e("li",[v._v("使用消息代理服务时提供消息模板")]),v._v(" "),e("li",[v._v("处理HTTP请求时用提供请求响应模板")]),v._v(" "),e("li",[v._v("服务注册机制")]),v._v(" "),e("li",[v._v("服务发现机制")]),v._v(" "),e("li",[v._v("服务熔断机制")]),v._v(" "),e("li",[v._v("......")])]),v._v(" "),e("p",[v._v("并且在解决上述问题的同时还需要保证：")]),v._v(" "),e("ul",[e("li",[v._v("能为在上述问题上为微服务系统提供统一的解决方案")]),v._v(" "),e("li",[v._v("快速简易地创建微服务：微服务的开发周期短，不能有过多的时间花费在解决上述问题中")])]),v._v(" "),e("p",[v._v("那么答案就只有一个了：在一个解决了上述所有问题的微服务框架上构建微服务系统。")]),v._v(" "),e("p",[v._v("例如，请看下面4中微服务框架：")]),v._v(" "),e("p",[e("img",{attrs:{src:"i/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6.png",alt:"各种微服务框架"}})]),v._v(" "),e("ul",[e("li",[v._v("只有服务调用没有服务治理类的框架。典型的代表有 gRPC、Thrift 等，他们很好地解决了服务间通信的问题，大部分也支持多语言，但使用这类框架时需要自己去解决服务治理问题。")]),v._v(" "),e("li",[v._v("带服务治理但支持单一语言的框架。典型的代表有 Spring Cloud 和 Dubbo，它们都是用 Java 实现的框架，用户整合多个开源项目一起并能满足服务治理等的需求。")]),v._v(" "),e("li",[v._v("Service Mesh。它支持服务治理，并通过 Sidecar 模式解决框架对多语言支持，业务需要再封装一套通讯组件去解决通讯问题，以及异步调用等问题，同时会增加架构和维护的复杂度。")]),v._v(" "),e("li",[v._v("带服务治理并支持多语言的框架。目前业界比较少，除了 Tars 目前还没有发现其它具有代表性的框架。")])]),v._v(" "),e("h3",{attrs:{id:"配置文件外部化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置文件外部化"}},[v._v("#")]),v._v(" 配置文件外部化")]),v._v(" "),e("p",[v._v("如何让服务使用第三方服务？如何让服务在不经过单独修改的情况下运行在多种环境中？")]),v._v(" "),e("ul",[e("li",[v._v("一个服务必须由一个配置文件告诉它如何连接外部服务，比如数据库的地址等。")]),v._v(" "),e("li",[v._v("一个服务必须能在不修改代码和重新编译的情况下运行在多种环境中，例如dev、test、qa、staging、production等环境")]),v._v(" "),e("li",[v._v("不同的环境中会有不同的第三方服务实例，例如测试环境的数据库和生产环境的数据库可能是不同的")])]),v._v(" "),e("p",[v._v("解决方法：将所有的应用配置外部化，形成一定格式的配置文件，在启动时由服务读入的方式进行配置，在不同的环境中使用不同的配置文件。")]),v._v(" "),e("p",[v._v("优点：服务能在不经过单独修改的情况下运行在多种环境中")]),v._v(" "),e("p",[v._v("缺点：保证各种环境下配置文件的正确性是个问题")])])}),[],!1,null,null,null);_.default=s.exports}}]);