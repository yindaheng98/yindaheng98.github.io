(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{733:function(e,a,t){"use strict";t.r(a);var r=t(4),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"安装docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装docker"}},[e._v("#")]),e._v(" 安装Docker")]),e._v(" "),t("h3",{attrs:{id:"ubuntu-docker-安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ubuntu-docker-安装"}},[e._v("#")]),e._v(" Ubuntu Docker 安装")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("uname -r\n")])])]),t("p",[e._v("👆先运行这个命令看Linux内核版本，大于3.10才能装")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("wget -qO- https://get.docker.com/ | sh\n")])])]),t("p",[e._v("👆一条命令就能装docker，连相关的设置和依赖都给你整好")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("sudo usermod -aG docker [你的用户名]\n")])])]),t("p",[e._v("👆当要以非root用户运行docker时，需要执行这个命令，然后重新登陆，一直用root的就不用管了。具体可以看安装完成后的一个提示：")]),e._v(" "),t("blockquote",[t("p",[e._v('If you would like to use Docker as a non-root user, you should now consider adding your user to the "docker" group with something like:')]),e._v(" "),t("p",[e._v("sudo usermod -aG docker your-user")]),e._v(" "),t("p",[e._v("Remember that you will have to log out and back in for this to take effect!")])]),e._v(" "),t("h2",{attrs:{id:"运行docker的hello-world"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行docker的hello-world"}},[e._v("#")]),e._v(" 运行Docker的hello-world")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("sudo service docker start\ndocker run hello-world\n")])])]),t("p",[e._v("👆启动docker后台服务然后整一个测试用的hello-world")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("docker")]),e._v(": Docker的二进制执行文件")]),e._v(" "),t("li",[t("code",[e._v("run")]),e._v(": 运行容器的Docker命令")]),e._v(" "),t("li",[t("code",[e._v("hello-world")]),e._v(": 要运行的镜像名，这里是运行测试用的hello-world镜像")])]),e._v(" "),t("p",[e._v("Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。")]),e._v(" "),t("h2",{attrs:{id:"载一个ubuntu镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#载一个ubuntu镜像"}},[e._v("#")]),e._v(" 载一个Ubuntu镜像")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker pull ubuntu\n")])])]),t("p",[e._v("👆从dockerhub载个ubuntu，这是dockerhub热门镜像之一（这镜像好像挺小的30M多）")]),e._v(" "),t("h2",{attrs:{id:"看本机有哪些镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#看本机有哪些镜像"}},[e._v("#")]),e._v(" 看本机有哪些镜像")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker images\n")])])]),t("p",[e._v("👆打了这个命令可以看到本机都下了哪些镜像，有"),t("code",[e._v("REPOSITORY")]),e._v("表示镜像的仓库源、镜像的版本标签（不同版本的镜像算作不同镜像，版本标签值就不一样）、镜像的ID"),t("code",[e._v("IMAGE ID")]),e._v("、什么时间建的、还有大小。可以看到刚才那个ubuntu镜像只有不到90M")]),e._v(" "),t("h2",{attrs:{id:"开一个新容器并在里面运行命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开一个新容器并在里面运行命令"}},[e._v("#")]),e._v(" 开一个新容器并在里面运行命令")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('docker run ubuntu /bin/echo "Hello world"\n')])])]),t("p",[e._v("👆比前面运行hello-world的时候多了个"),t("code",[e._v('/bin/echo "Hello world"')]),e._v("，这是要在容器里面执行的命令。输出就是个"),t("code",[e._v("Hello world")])]),e._v(" "),t("blockquote",[t("p",[e._v("注意容器和镜像的区别：")]),e._v(" "),t("p",[e._v("镜像(image)是一个静态文件，里面的内容是不会在运行的时候发生变化的，镜像运行之后会生成一个容器(container)，里面的内容会随着我们运行的程序和操作发生变化。镜像是容器的模板，容器基于镜像而产生。")]),e._v(" "),t("p",[e._v("所以在删镜像的时候，如果有某个容器是基于这个镜像而产生的，那删这个镜像的时候会报“某个容器在用这个镜像”的错误，要先把容器删了才行。")])]),e._v(" "),t("p",[e._v('/bin/echo "Hello world": 在启动的容器里执行的命令')]),e._v(" "),t("p",[e._v('以上命令完整的意思可以解释为：Docker以ubuntu镜像创建一个新容器，然后在容器里执行 bin/echo "Hello world"，然后输出结果。')]),e._v(" "),t("h2",{attrs:{id:"交互式地开容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#交互式地开容器"}},[e._v("#")]),e._v(" 交互式地开容器")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker run -i -t ubuntu /bin/bash\n")])])]),t("p",[e._v("👆加了两个参数 -i -t，直接进了ubuntu系统的命令行，和ssh一样可以打"),t("code",[e._v("exit")]),e._v("退出。各个参数解析：")]),e._v(" "),t("ul",[t("li",[e._v("-i: 允许你对容器内的标准输入 (STDIN) 进行交互。")]),e._v(" "),t("li",[e._v("-t: 在新容器内指定一个伪终端或终端。")])]),e._v(" "),t("p",[e._v("此时我们已进入一个 ubuntu15.10系统的容器\n我们尝试在容器中运行命令 cat /proc/version和ls分别查看当前系统的版本信息和当前目录下的文件列表")]),e._v(" "),t("h2",{attrs:{id:"后台模式开容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后台模式开容器"}},[e._v("#")]),e._v(" 后台模式开容器")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker run -d ubuntu\n")])])]),t("p",[e._v("👆加一个"),t("code",[e._v("-d")]),e._v("把容器放在后台运行。打了这个命令之后会出一串数字，叫做容器ID，对每个容器来说都是唯一的，我们可以通过容器ID来查看对应的容器发生了什么")]),e._v(" "),t("h2",{attrs:{id:"查看容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看容器"}},[e._v("#")]),e._v(" 查看容器")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker ps\n")])])]),t("p",[e._v("👆查看正在运行的容器。看不见刚才挂在后台的ubuntu？应该是没有打要运行的命令然后ubuntu关机了吧。在后台挂一个死循环shell看看👇")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('docker run -d ubuntu /bin/sh -c "while true; do echo hello world; sleep 1; done"\n')])])]),t("p",[e._v("👌好现在再打"),t("code",[e._v("docker ps")]),e._v("能看见ubuntu在运行了。而且还可以从"),t("code",[e._v("COMMAND")]),e._v("里面看ubuntu在运行啥。")]),e._v(" "),t("p",[e._v("另外还有👇查看所有的容器，没在运行容器的也显示出来了")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker ps -a\n")])])]),t("p",[e._v("👆经过上面一通操作之后打这个命令会发现已经有了好几个容器了，为什么呢？因为"),t("code",[e._v("docker run ubuntu")]),e._v("是用ubuntu镜像创建新容器而不是运行已有容器啊小傻瓜")]),e._v(" "),t("h2",{attrs:{id:"运行已有容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行已有容器"}},[e._v("#")]),e._v(" 运行已有容器")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker start [容器ID]\n")])])]),t("p",[e._v("👆这个命令用于运行已有容器，[容器ID]里面填之前打"),t("code",[e._v("docker ps")]),e._v("出来的那个表里面的"),t("code",[e._v("CONTAINER ID")]),e._v("列")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker start -i [容器ID]\n")])])]),t("p",[e._v("👆start不需要用-t搞终端，终端在run的时候用-t搞好")]),e._v(" "),t("h2",{attrs:{id:"查看容器内的输出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看容器内的输出"}},[e._v("#")]),e._v(" 查看容器内的输出")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker logs [容器ID]\n")])])]),t("p",[e._v("👆这个命令看某个正在运行的容器里面都输出了啥，[容器ID]里面填啥上面运行已有容器一样。输刚才挂后台的那个ubuntu的"),t("code",[e._v("CONTAINER ID")]),e._v("出一堆hello world（废话")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker logs -f [容器ID]\n")])])]),t("p",[e._v("👆不加"),t("code",[e._v("-f")]),e._v("的时候输出只输出目前容器里面已经输出的东西，出完就结束，加一个"),t("code",[e._v("-f")]),e._v("一直输出，"),t("code",[e._v("ctrl+c")]),e._v("退出")]),e._v(" "),t("h2",{attrs:{id:"和在后台的容器交互"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#和在后台的容器交互"}},[e._v("#")]),e._v(" 和在后台的容器交互")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker run -dit [容器ID]\n")])])]),t("p",[e._v("👆当一个容器以这种方式运行的时候，就可以用这种方式👇再进到运行中的容器的命令行。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker attach [容器ID]\n")])])]),t("h2",{attrs:{id:"把容器关了"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#把容器关了"}},[e._v("#")]),e._v(" 把容器关了")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker stop [容器ID]\n")])])]),t("p",[e._v("👆字面意思，不说了。[容器ID]里面填啥上面一样")]),e._v(" "),t("h2",{attrs:{id:"删镜像和删容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删镜像和删容器"}},[e._v("#")]),e._v(" 删镜像和删容器")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker rm [容器ID]\ndocker rmi [镜像ID]\ndocker rmi [REPOSITORY]:[TAG]\n")])])]),t("p",[e._v("👆rm是删容器，rmi是删镜像，[容器ID]和上面一样，[镜像ID]是打"),t("code",[e._v("docker images")]),e._v("出的表里面的"),t("code",[e._v("IMAGE ID")]),e._v("列")]),e._v(" "),t("h2",{attrs:{id:"把容器保存为镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#把容器保存为镜像"}},[e._v("#")]),e._v(" 把容器保存为镜像")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('docker commit -m="[确认信息]" -a="[作者]" [容器ID] [REPOSITORY]:[TAG]\n')])])]),t("p",[e._v("👆把[容器ID]所指定的容器保存为名称为[REPOSITORY]版本为[TAG]的镜像。[确认信息]和[作者]随便填。")]),e._v(" "),t("h2",{attrs:{id:"把镜像上传dockerhub"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#把镜像上传dockerhub"}},[e._v("#")]),e._v(" 把镜像上传Dockerhub")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker push [REPOSITORY]\n")])])]),t("p",[e._v("👆把[REPOSITORY]镜像上传到Dockerhub里去（这网速也太卡了")]),e._v(" "),t("h2",{attrs:{id:"docker的端口映射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker的端口映射"}},[e._v("#")]),e._v(" Docker的端口映射")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('docker run -p "80:80" ubuntu\n')])])]),t("p",[e._v("👆把ubuntu的80端口映射到主机的80端口")]),e._v(" "),t("h2",{attrs:{id:"docker的外部硬盘挂载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker的外部硬盘挂载"}},[e._v("#")]),e._v(" Docker的外部硬盘挂载")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("docker run -v [主机地址]:[虚拟机地址] ubuntu\n")])])]),t("p",[e._v("👆把[主机地址]挂载到ubuntu的[虚拟机地址]上")])])}),[],!1,null,null,null);a.default=s.exports}}]);