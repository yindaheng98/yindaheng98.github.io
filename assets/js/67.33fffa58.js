(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{703:function(s,r,t){"use strict";t.r(r);var e=t(4),a=function(s){s.options.__data__block__={mermaid_382ee21f:"graph LR\ntask(task)--n---包含{包含}--1---cgroup(cgroup)--n---属于{属于}--1---hierarchy(hierarchy)--1---绑定{绑定}--n---subsystem(subsystem)\n"}},_=Object(e.a)({},(function(){var s=this,r=s.$createElement,t=s._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[t("a",{attrs:{href:"http://www.sel.zju.edu.cn/?p=573",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker背后的内核知识——cgroups资源限制"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("通俗的来说，cgroups可以"),t("strong",[s._v("限制、记录、隔离进程组所使用的物理资源")]),s._v("（包括：CPU、memory、IO等），为容器实现虚拟化提供了基本保证，是构建Docker等一系列虚拟化管理工具的基石。实现cgroups的主要目的是为不同用户层面的资源管理提供一个统一化的接口。从单个进程的资源控制到操作系统层面的虚拟化。Cgroups提供了以下四大功能：")]),s._v(" "),t("ul",[t("li",[s._v("资源限制（Resource Limitation）：cgroups可以对进程组使用的资源总额进行限制。如设定应用运行时使用内存的上限，一旦超过这个配额就发出OOM（Out of Memory）。")]),s._v(" "),t("li",[s._v("优先级分配（Prioritization）：通过分配的CPU时间片数量及硬盘IO带宽大小，实际上就相当于控制了进程运行的优先级。")]),s._v(" "),t("li",[s._v("资源统计（Accounting）： cgroups可以统计系统的资源使用量，如CPU使用时长、内存用量等等，这个功能非常适用于计费。")]),s._v(" "),t("li",[s._v("进程控制（Control）：cgroups可以对进程组执行挂起、恢复等操作。")])]),s._v(" "),t("h2",{attrs:{id:"相关定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相关定义"}},[s._v("#")]),s._v(" 相关定义")]),s._v(" "),t("ol",[t("li",[s._v("task：一个进程")]),s._v(" "),t("li",[s._v("cgroup：按某种资源控制标准划分而成的task组，包含一个或多个subsystem")]),s._v(" "),t("li",[s._v("subsystem：资源调度控制器，Linux支持12种subsystem，比如CPU subsystem可以控制CPU时间分配，内存 subsystem可以限制cgroup内存使用量")]),s._v(" "),t("li",[s._v("hierarchy：一系列cgroup以一个树状结构排列而成，每个hierarchy通过绑定对应的subsystem进行资源调度")])]),s._v(" "),t("h2",{attrs:{id:"基本规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本规则"}},[s._v("#")]),s._v(" 基本规则")]),s._v(" "),t("h3",{attrs:{id:"task、cgroup、subsystem、hierarchy关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#task、cgroup、subsystem、hierarchy关系"}},[s._v("#")]),s._v(" task、cgroup、subsystem、hierarchy关系")]),s._v(" "),t("ol",[t("li",[s._v("同一个hierarchy可以附加零到多个subsystem")]),s._v(" "),t("li",[s._v("一个subsystem只可以附加到一个hierarchy")]),s._v(" "),t("li",[s._v("每一个hierarchy里面，都包含Linux系统中的所有task")]),s._v(" "),t("li",[s._v("一个task可以在多个hierarchy里，但不能在同一个hierarchy的多个cgroup中")])]),s._v(" "),t("Mermaid",{attrs:{id:"mermaid_382ee21f",graph:s.$dataBlock.mermaid_382ee21f}}),t("p",[t("code",[s._v("/proc/cgroups")]),s._v("文件中可以看到当前的subsystem情况，例如：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#subsys_name    hierarchy       num_cgroups     enabled")]),s._v("\ncpuset          "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v("              "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\ncpu             "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("              "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\ncpuacct         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("              "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nblkio           "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("              "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nmemory          "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("104")]),s._v("             "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\ndevices         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("              "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nfreezer         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("              "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nnet_cls         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nperf_event      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nnet_prio        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nhugetlb         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\npids            "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("68")]),s._v("              "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("其中：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("subsys_name")]),s._v("表示subsystem名称")]),s._v(" "),t("li",[t("code",[s._v("hierarchy")]),s._v("表示该subsystem绑定的hierarchy编号")]),s._v(" "),t("li",[t("code",[s._v("num_cgroups")]),s._v("表示该subsystem绑定的hierarchy中的task数量")]),s._v(" "),t("li",[t("code",[s._v("enabled")]),s._v("表示该subsystem是否启动")])]),s._v(" "),t("h4",{attrs:{id:"subsystem分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#subsystem分类"}},[s._v("#")]),s._v(" subsystem分类")]),s._v(" "),t("ul",[t("li",[s._v("cpu (since Linux 2.6.24; CONFIG_CGROUP_SCHED)\n"),t("ul",[t("li",[s._v("用来限制cgroup的CPU使用率。")])])]),s._v(" "),t("li",[s._v("cpuacct (since Linux 2.6.24; CONFIG_CGROUP_CPUACCT)\n"),t("ul",[t("li",[s._v("统计cgroup的CPU的使用率。")])])]),s._v(" "),t("li",[s._v("cpuset (since Linux 2.6.24; CONFIG_CPUSETS)\n"),t("ul",[t("li",[s._v("绑定cgroup到指定CPUs和NUMA节点。")])])]),s._v(" "),t("li",[s._v("memory (since Linux 2.6.25; CONFIG_MEMCG)\n"),t("ul",[t("li",[s._v("统计和限制cgroup的内存的使用率，包括process memory, kernel memory, 和swap。")])])]),s._v(" "),t("li",[s._v("devices (since Linux 2.6.26; CONFIG_CGROUP_DEVICE)\n"),t("ul",[t("li",[s._v("限制cgroup创建(mknod)和访问设备的权限。")])])]),s._v(" "),t("li",[s._v("freezer (since Linux 2.6.28; CONFIG_CGROUP_FREEZER)\n"),t("ul",[t("li",[s._v("suspend和restore一个cgroup中的所有进程。")])])]),s._v(" "),t("li",[s._v("net_cls (since Linux 2.6.29; CONFIG_CGROUP_NET_CLASSID)\n"),t("ul",[t("li",[s._v("将一个cgroup中进程创建的所有网络包加上一个classid标记，用于tc和iptables。 只对发出去的网络包生效，对收到的网络包不起作用。")])])]),s._v(" "),t("li",[s._v("blkio (since Linux 2.6.33; CONFIG_BLK_CGROUP)\n"),t("ul",[t("li",[s._v("限制cgroup访问块设备的IO速度。")])])]),s._v(" "),t("li",[s._v("perf_event (since Linux 2.6.39; CONFIG_CGROUP_PERF)\n"),t("ul",[t("li",[s._v("对cgroup进行性能监控\nnet_prio (since Linux 3.3; CONFIG_CGROUP_NET_PRIO)")]),s._v(" "),t("li",[s._v("针对每个网络接口设置cgroup的访问优先级。")])])]),s._v(" "),t("li",[s._v("hugetlb (since Linux 3.5; CONFIG_CGROUP_HUGETLB)\n"),t("ul",[t("li",[s._v("限制cgroup的huge pages的使用量。")])])]),s._v(" "),t("li",[s._v("pids (since Linux 4.3; CONFIG_CGROUP_PIDS)\n"),t("ul",[t("li",[s._v("限制一个cgroup及其子孙cgroup中的总进程数。")])])])]),s._v(" "),t("h3",{attrs:{id:"cgroups运行规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cgroups运行规则"}},[s._v("#")]),s._v(" cgroups运行规则")]),s._v(" "),t("ol",[t("li",[s._v("新建一个hierarchy时，系统上当前运行的所有进程构成该hierarchy中的第一个cgroup，称为root cgroup")]),s._v(" "),t("li",[s._v("把一个cgroup中的task添加到同一个hierarchy中的另一个cgroup中，则会自动从之前cgroup中移除")]),s._v(" "),t("li",[s._v("创建子进程时，子进程与父进程在同一个cgroup，但是子进程随后可以自由移动到其他cgroup")])]),s._v(" "),t("h2",{attrs:{id:"cgroup的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cgroup的使用"}},[s._v("#")]),s._v(" cgroup的使用")]),s._v(" "),t("h3",{attrs:{id:"创建hierarchy及root-cgroup"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建hierarchy及root-cgroup"}},[s._v("#")]),s._v(" 创建hierarchy及root cgroup")]),s._v(" "),t("p",[s._v("cgroup相关的所有操作都是基于内核中的cgroup virtual filesystem，使用cgroup很简单，使用"),t("code",[s._v("mount -t cgroup -o cpu,cpuacct")]),s._v("挂载一个文件系统就可以了，需要哪个subsystem就挂载到哪个subsystem的目录下。挂载到任何目录都可以，一般情况下都是挂载到"),t("code",[s._v("/sys/fs/cgroup")]),s._v("目录下。例如：")]),s._v(" "),t("p",[s._v("创建一个绑定所有subsystem的hierarchy：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mount")]),s._v(" -t cgroup "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("hierarchy目录"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" /sys/fs/cgroup\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("创建一个绑定cpuset subsystem的hierarchy：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" /sys/fs/cgroup/cpuset\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mount")]),s._v(" -t cgroup -o cpuset "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("hierarchy目录"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" /sys/fs/cgroup/cpuset\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("创建一个绑定cpu和cpuacct subsystem的hierarchy：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" /sys/fs/cgroup/cpu,cpuacct\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mount")]),s._v(" -t cgroup -o cpu,cpuacct "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("hierarchy目录"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" /sys/fs/cgroup/cpu,cpuacct\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("创建一个不绑定任何subsystem的hierarchy，下面就是linux中systemd所用到的方式：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" /sys/fs/cgroup/systemd\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mount")]),s._v(" -t cgroup -o none,name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("systemd xxx /sys/fs/cgroup/systemd\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("如果要绑定一个已经被绑定到其他hierarchy的subsystem，则会报错。例如：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mount")]),s._v(" -t cgroup -o devices,pids new-devices-pids ./devices,pids\nmount: new-devices-pids is already mounted or /home/dev/cgroup/devices,pids busy\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"创建-删除子cgroup"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建-删除子cgroup"}},[s._v("#")]),s._v(" 创建/删除子cgroup")]),s._v(" "),t("p",[s._v("创建子cgroup即在cgroup目录下创建一个文件夹：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("cgroup文件夹"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("删除子cgroup即删除这个文件夹：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("rmdir")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("cgroup文件夹"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果要删除的cgroup包含有子cgroup或进程，则会报错：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("rmdir: failed to remove "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'[cgroup文件夹]/'")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" Device or resource busy\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"cgroup目录下的文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cgroup目录下的文件"}},[s._v("#")]),s._v(" cgroup目录下的文件")]),s._v(" "),t("p",[s._v("当挂载hierarchy或在创建子cgroup文件夹时，一些文件会自动生成。例如：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" /sys/fs/cgroup/cpu\ncgroup.clone_children  cgroup.procs  cgroup.sane_behavior  notify_on_release  release_agent tasks\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ul",[t("li",[s._v("cgroup.clone_children：当该文件的内容为1时，新创建的cgroup将会继承父cgroup的配置，即从父cgroup里面拷贝配置文件来初始化新cgroup\n"),t("ul",[t("li",[s._v("只对cpuset（subsystem）有影响")])])]),s._v(" "),t("li",[s._v("cgroup.procs：当前cgroup中的所有"),t("strong",[s._v("进程")]),s._v("ID")]),s._v(" "),t("li",[s._v("tasks：当前cgroup中的所有"),t("strong",[s._v("线程")]),s._v("ID")]),s._v(" "),t("li",[s._v("notify_on_release：该文件的内容为1时，"),t("strong",[s._v("当cgroup退出时（不再包含任何进程和子cgroup），将调用release_agent里面配置的命令")]),s._v(" "),t("ul",[t("li",[s._v("新cgroup被创建时将默认继承父cgroup的这项配置。")])])]),s._v(" "),t("li",[s._v("release_agent：cgroup退出时将会执行的命令，系统调用该命令时会将相应cgroup的相对路径当作参数传进去\n"),t("ul",[t("li",[s._v("这个文件只会存在于root cgroup文件夹下")])])]),s._v(" "),t("li",[s._v("cgroup.sane_behavior：与下一代CGroup中的sane_behavior有关")])]),s._v(" "),t("p",[s._v("除上述文件之外，还可能会有：")]),s._v(" "),t("ul",[t("li",[s._v("pids.current: 表示当前cgroup及其所有子孙cgroup中现有的总的进程数量")]),s._v(" "),t("li",[s._v("pids.max: 当前cgroup及其所有子孙cgroup中所允许创建的总的最大进程数量\n"),t("ul",[t("li",[s._v("root cgroup下没有这个文件，原因显而易见，因为我们没有必要限制整个系统所能创建的进程数量")])])])]),s._v(" "),t("h4",{attrs:{id:"注：下一代的cgroup和sane-behavior介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注：下一代的cgroup和sane-behavior介绍"}},[s._v("#")]),s._v(" 注："),t("RouterLink",{attrs:{to:"/Docker/sane_behavior.html"}},[s._v("下一代的CGroup和sane behavior介绍")])],1),s._v(" "),t("h3",{attrs:{id:"添加进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加进程"}},[s._v("#")]),s._v(" 添加进程")]),s._v(" "),t("p",[s._v("执行添加进程操作只要在cgroup.procs写入PID即可，有cgroup.procs写入权限即可：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("进程PID"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" cgroup.procs\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果此进程已经在同hierarchy的另一个cgroup里面了，上述操作会自动从原来的cgroup中删除。")]),s._v(" "),t("p",[s._v("注：进程移动时，进程下的线程会随之一起移动，可以在"),t("code",[s._v("tasks")]),s._v("文件中看到")]),s._v(" "),t("h2",{attrs:{id:"cgroup进行资源限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cgroup进行资源限制"}},[s._v("#")]),s._v(" cgroup进行资源限制")]),s._v(" "),t("h3",{attrs:{id:"限制内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#限制内存"}},[s._v("#")]),s._v(" 限制内存")]),s._v(" "),t("p",[s._v("挂载一个memory subsystem，除上文所述"),t("code",[s._v("cgroup.*")]),s._v("文件外，对应目录下会有一系列与内存限制相关的文件：")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("文件名")]),s._v(" "),t("th",[s._v("用途")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("cgroup.event_control")]),s._v(" "),t("td",[s._v("用于eventfd的接口")])]),s._v(" "),t("tr",[t("td",[s._v("memory.usage_in_bytes")]),s._v(" "),t("td",[s._v("显示当前已用的内存")])]),s._v(" "),t("tr",[t("td",[s._v("memory.limit_in_bytes")]),s._v(" "),t("td",[s._v("设置/显示当前限制的内存额度")])]),s._v(" "),t("tr",[t("td",[s._v("memory.failcnt")]),s._v(" "),t("td",[s._v("显示内存使用量达到限制值的次数")])]),s._v(" "),t("tr",[t("td",[s._v("memory.max_usage_in_bytes")]),s._v(" "),t("td",[s._v("历史内存最大使用量")])]),s._v(" "),t("tr",[t("td",[s._v("memory.soft_limit_in_bytes")]),s._v(" "),t("td",[s._v("设置/显示当前限制的内存软额度")])]),s._v(" "),t("tr",[t("td",[s._v("memory.stat")]),s._v(" "),t("td",[s._v("显示当前cgroup的内存使用情况")])]),s._v(" "),t("tr",[t("td",[s._v("memory.use_hierarchy")]),s._v(" "),t("td",[s._v("设置/显示是否将子cgroup的内存使用情况统计到当前cgroup里面")])]),s._v(" "),t("tr",[t("td",[s._v("memory.force_empty")]),s._v(" "),t("td",[s._v("写入0时触发系统立即尽可能的回收当前cgroup中可以回收的内存")])]),s._v(" "),t("tr",[t("td",[s._v("memory.pressure_level")]),s._v(" "),t("td",[s._v("设置内存压力的通知事件，配合cgroup.event_control一起使用")])]),s._v(" "),t("tr",[t("td",[s._v("memory.swappiness")]),s._v(" "),t("td",[s._v("设置和显示当前的swappiness")])]),s._v(" "),t("tr",[t("td",[s._v("memory.move_charge_at_immigrate")]),s._v(" "),t("td",[s._v("设置当进程移动到其他cgroup中时，它所占用的内存是否也随着移动过去")])]),s._v(" "),t("tr",[t("td",[s._v("memory.oom_control")]),s._v(" "),t("td",[s._v("设置/显示oom controls相关的配置")])]),s._v(" "),t("tr",[t("td",[s._v("memory.numa_stat")]),s._v(" "),t("td",[s._v("显示numa相关的内存")])])])]),s._v(" "),t("ul",[t("li",[s._v("memory.usage_in_bytes\n"),t("ul",[t("li",[s._v("读此文件获得当前使用的内存大小（正整数字符串），单位字节")])])]),s._v(" "),t("li",[s._v("memory.limit_in_bytes\n"),t("ul",[t("li",[s._v("读此文件获得当前的内存大小限制（正整数字符串），单位字节")]),s._v(" "),t("li",[s._v("写此文件设置内存大小限制（正整数字符串），单位字节")]),s._v(" "),t("li",[s._v("向此文件写入“-1”取消限制")])])]),s._v(" "),t("li",[s._v("memory.soft_limit_in_bytes\n"),t("ul",[t("li",[s._v("当系统内存充裕时，soft limit不起任何作用")]),s._v(" "),t("li",[s._v("当系统内存吃紧时，系统会尽量的将cgroup的内存限制在soft limit值之下（内核会尽量，但不100%保证）")]),s._v(" "),t("li",[s._v("正确用法：给次等重要的进程设置soft limit，当系统内存吃紧时，把机会让给其它重要的进程")])])]),s._v(" "),t("li",[s._v("memory.failcnt\n"),t("ul",[t("li",[s._v("读此文件获取物理内存使用量达到限制值的次数")]),s._v(" "),t("li",[s._v("当内存内容超过memory.limit_in_bytes限额时，memory.failcnt内容的值加一，超出内容放入swap分区")]),s._v(" "),t("li",[s._v("若物理内存已达memory.limit_in_bytes上限而swap分区容量不足，后续所有申请内存的进程操作视memory.oom_control而定")])])]),s._v(" "),t("li",[s._v("memory.oom_control\n"),t("ul",[t("li",[s._v("向此文件写入“0”，则物理内存已达memory.limit_in_bytes上限而swap分区容量不足时直接kill掉该进程")]),s._v(" "),t("li",[s._v("向此文件写入“1”，则物理内存已达memory.limit_in_bytes上限而swap分区容量不足时暂停该进程直到有空余的内存之后再继续运行")]),s._v(" "),t("li",[s._v("root cgroup的memory.oom_control写“1”无效，永远采取直接kill掉该进程的策略")])])]),s._v(" "),t("li",[s._v("memory.use_hierarchy\n"),t("ul",[t("li",[s._v("该文件内容为0时，表示不使用继承，即父子cgroup之间没有关系")]),s._v(" "),t("li",[s._v("当该文件内容为1时，子cgroup所占用的内存会统计到所有祖先cgroup中，当一个cgroup内存吃紧时，会触发系统回收它以及它所有子孙cgroup的内存")])])])]),s._v(" "),t("h3",{attrs:{id:"限制cpu使用率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#限制cpu使用率"}},[s._v("#")]),s._v(" 限制CPU使用率")]),s._v(" "),t("p",[s._v("挂载一个memory subsystem，除上文所述"),t("code",[s._v("cgroup.*")]),s._v("文件外，对应目录下会有一系列与CPU使用率限制相关的文件：")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("文件名")]),s._v(" "),t("th",[s._v("用途")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("cpu.cfs_period_us")]),s._v(" "),t("td",[s._v("配置总时间周期长度")])]),s._v(" "),t("tr",[t("td",[s._v("cpu.cfs_quota_us")]),s._v(" "),t("td",[s._v("当前cgroup所能使用的时间周期长度")])]),s._v(" "),t("tr",[t("td",[s._v("cpu.shares")]),s._v(" "),t("td",[s._v("设置CPU的相对值")])]),s._v(" "),t("tr",[t("td",[s._v("cpu.stat")]),s._v(" "),t("td",[s._v("CPU使用统计结果")])])])]),s._v(" "),t("h4",{attrs:{id:"cpu使用时间上限：cpu-cfs-period-us和cpu-cfs-quota-us"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cpu使用时间上限：cpu-cfs-period-us和cpu-cfs-quota-us"}},[s._v("#")]),s._v(" CPU使用时间上限：cpu.cfs_period_us和cpu.cfs_quota_us")]),s._v(" "),t("p",[s._v("每cfs_quota_us毫秒能使用cfs_period_us毫秒的CPU时间")]),s._v(" "),t("ol",[t("li",[s._v("最多只能使用1个CPU（每250ms最多能使用250ms的CPU时间）")])]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# echo 250000 > cpu.cfs_quota_us /* quota = 250ms */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# echo 250000 > cpu.cfs_period_us /* period = 250ms */")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ol",[t("li",[s._v("最多使用2个CPU（每500ms最多能使用1000ms的CPU时间，即使用两个内核）")])]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# echo 1000000 > cpu.cfs_quota_us /* quota = 1000ms */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# echo 500000 > cpu.cfs_period_us /* period = 500ms */")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ol",{attrs:{start:"3"}},[t("li",[s._v("最多使用1个CPU的20%（每50ms最多能使用10ms的CPU时间，即使用一个CPU核心的20%）")])]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# echo 10000 > cpu.cfs_quota_us /* quota = 10ms */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# echo 50000 > cpu.cfs_period_us /* period = 50ms */")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h4",{attrs:{id:"cpu使用时间相对值：cpu-shares"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cpu使用时间相对值：cpu-shares"}},[s._v("#")]),s._v(" CPU使用时间相对值：cpu.shares")]),s._v(" "),t("p",[s._v("设置cgroup获得CPU轮转时间的相对值，默认值是1024。")]),s._v(" "),t("p",[s._v("假如系统中有两个cgroup，分别是A和B，A的shares值是1024，B的shares值是512，那么A将获得1024/(1204+512)=66%的CPU资源，而B将获得33%的CPU资源。")]),s._v(" "),t("ul",[t("li",[s._v("如果A不忙，没有使用到66%的CPU时间，那么剩余的CPU时间将会被系统分配给B，即B的CPU使用率可以超过33%")]),s._v(" "),t("li",[s._v("如果添加了一个新的cgroup C，且它的shares值是1024，那么A的限额变成了1024/(1204+512+1024)=40%，B的变成了20%")])]),s._v(" "),t("h4",{attrs:{id:"cpu使用时间统计：cpu-stat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cpu使用时间统计：cpu-stat"}},[s._v("#")]),s._v(" CPU使用时间统计：cpu.stat")]),s._v(" "),t("ul",[t("li",[s._v("nr_periods： 表示过去了多少个cpu.cfs_period_us里面配置的时间周期")]),s._v(" "),t("li",[s._v("nr_throttled： 在上面的这些周期中，有多少次是受到了限制（即cgroup中的进程在指定的时间周期中用光了它的配额）")]),s._v(" "),t("li",[s._v("throttled_time: cgroup中的进程被限制使用CPU持续了多长时间(纳秒)")])])],1)}),[],!1,null,null,null);"function"==typeof a&&a(_);r.default=_.exports}}]);